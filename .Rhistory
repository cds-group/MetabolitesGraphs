axis.text.x = element_text(angle=45, hjust=1))
PT = dunnTest(value ~ label,
data=df.m_proteo,
method="bh")
PT
PT = dunnTest(value ~ label,
data=df.m_fuso,
method="bh")
PT
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=label))+
geom_signif(annotations = c(formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0)),
y_position = c(0.8, 1.2,1.6,3.2,3.6,2.5,2.9,3.3,3.7,4.2,4.6,2.8,3.2,3.6), xmin=c(0.7,0.9,0.7,1.7,1.9,2.7,2.9,2.7,2.9,3.7,3.9,4.7,4.9,4.7), xmax=c(1.1,1.1,1.3,2.1,2.1,3.1,3.1,3.3,3.3,4.1,4.1,5.1,5.1,5.3)) +
#ggtitle("") +
labs(x = "",y="log(Relative abundance)") +
theme_bw() +
scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=label))+
geom_signif(annotations = c(formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0),formatC("**", digits=0)),
y_position = c(0.8, 1.2,1.6,3.2,3.6,2.5,2.9,3.3,3.7,4.2,4.6,2.8,3.2,3.6,4), xmin=c(0.7,0.9,0.7,1.7,1.9,2.7,2.9,2.7,2.9,3.7,3.9,4.7,4.9,4.7,4.9), xmax=c(1.1,1.1,1.3,2.1,2.1,3.1,3.1,3.3,3.3,4.1,4.1,5.1,5.1,5.3,5.3)) +
#ggtitle("") +
labs(x = "",y="log(Relative abundance)") +
theme_bw() +
scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
PT
PT = dunnTest(value ~ label,
data=df.m_proteo,
method="bh")
PT
PT = dunnTest(value ~ label,
data=df.m_acido,
method="bh")
PT
PT = dunnTest(value ~ label,
data=df.m_act,
method="bh")
PT
PT = dunnTest(value ~ label,
data=df.m_bact,
method="bh")
PT
PT = dunnTest(value ~ label,
data=df.m_firmi,
method="bh")
PT
dna=read.delim("/Volumes/DATA/metaSacchetti/Dicembre_2019/Irun/samsa/organism/filtered/corr_16S/rel_counts_6samples_16S.txt", header=TRUE,sep="\t",row.names=1)
t_dna$label=c("CO","CO","CO","CO","CO","CO","OB","OB","OB","OB","OB","OB","OB")
dna$label=c("CO","CO","CO","CO","CO","CO","OB","OB","OB","OB","OB","OB","OB")
df.m <- melt(dna, id.var = "label")
require(reshape2)
df.m <- melt(dna, id.var = "label")
View(df.m)
require(ggplot2)
require(ggsignif)
require(dplyr)
pv <- df.m %>% group_by(variable) %>%
summarize(p.value = kruskal.test(value ~ label)$p.value)
pv
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=label))+
#geom_signif(annotations = c(formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0),formatC("**", digits=0)),
#           y_position = c(0.8, 1.2,1.6,3.2,3.6,2.5,2.9,3.3,3.7,4.2,4.6,2.8,3.2,3.6,4), xmin=c(0.7,0.9,0.7,1.7,1.9,2.7,2.9,2.7,2.9,3.7,3.9,4.7,4.9,4.7,4.9), xmax=c(1.1,1.1,1.3,2.1,2.1,3.1,3.1,3.3,3.3,4.1,4.1,5.1,5.1,5.3,5.3)) +
#ggtitle("") +
labs(x = "",y="log(Relative abundance)") +
theme_bw() +
#scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
p<-ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=label))+
#geom_signif(annotations = c(formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0),formatC("**", digits=0)),
#           y_position = c(0.8, 1.2,1.6,3.2,3.6,2.5,2.9,3.3,3.7,4.2,4.6,2.8,3.2,3.6,4), xmin=c(0.7,0.9,0.7,1.7,1.9,2.7,2.9,2.7,2.9,3.7,3.9,4.7,4.9,4.7,4.9), xmax=c(1.1,1.1,1.3,2.1,2.1,3.1,3.1,3.3,3.3,4.1,4.1,5.1,5.1,5.3,5.3)) +
#ggtitle("") +
labs(x = "",y="log(Relative abundance)") +
theme_bw() +
#scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
gg.gap(plot=p,
segments=c(15,20),
tick_width = c(2.5,10),
ylim=c(0,90))
require(gg.gap)
gg.gap(plot=p,
segments=c(15,20),
tick_width = c(2.5,10),
ylim=c(0,90))
gg.gap(plot=p,
segments=c(5,20),
tick_width = c(2.5,10),
ylim=c(0,90))
p<-ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=label))+
#geom_signif(annotations = c(formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0),formatC("**", digits=0)),
#           y_position = c(0.8, 1.2,1.6,3.2,3.6,2.5,2.9,3.3,3.7,4.2,4.6,2.8,3.2,3.6,4), xmin=c(0.7,0.9,0.7,1.7,1.9,2.7,2.9,2.7,2.9,3.7,3.9,4.7,4.9,4.7,4.9), xmax=c(1.1,1.1,1.3,2.1,2.1,3.1,3.1,3.3,3.3,4.1,4.1,5.1,5.1,5.3,5.3)) +
ggtitle("16S (13 samples") +
labs(x = "",y="Relative abundance") +
theme_bw() +
#scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
gg.gap(plot=p,
segments=c(5,20),
tick_width = c(.5,10),
ylim=c(0,90))
gg.gap(plot=p,
segments=c(15,20),
tick_width = c(2.5,10),
ylim=c(0,90))
p<-ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=label))+
#geom_signif(annotations = c(formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0),formatC("**", digits=0)),
#           y_position = c(0.8, 1.2,1.6,3.2,3.6,2.5,2.9,3.3,3.7,4.2,4.6,2.8,3.2,3.6,4), xmin=c(0.7,0.9,0.7,1.7,1.9,2.7,2.9,2.7,2.9,3.7,3.9,4.7,4.9,4.7,4.9), xmax=c(1.1,1.1,1.3,2.1,2.1,3.1,3.1,3.3,3.3,4.1,4.1,5.1,5.1,5.3,5.3)) +
ggtitle("16S (13 samples)") +
labs(x = "",y="Relative abundance") +
theme_bw() +
#scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
gg.gap(plot=p,
segments=c(15,20),
tick_width = c(2.5,10),
ylim=c(0,90))
gg.gap(plot=p,
segments=c(14,20),
tick_width = c(2,10),
ylim=c(0,90))
dna=read.delim("/Volumes/DATA/metaSacchetti/Dicembre_2019/Irun/samsa/organism/filtered/corr_16S/rel_counts_6samples_mRNA.txt", header=TRUE,sep="\t",row.names=1)
t_dna=as.data.frame(t(dna))
View(t_dna)
t_dna$label=c("CO","CO","CO","CO","CO","CO","OB","OB","OB","OB","OB","OB","OB")
df.m <- melt(t_dna, id.var = "label")
pv <- df.m %>% group_by(variable) %>%
summarize(p.value = kruskal.test(value ~ label)$p.value)
pv
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=label))+
#geom_signif(annotations = c(formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0),formatC("**", digits=0)),
#           y_position = c(0.8, 1.2,1.6,3.2,3.6,2.5,2.9,3.3,3.7,4.2,4.6,2.8,3.2,3.6,4), xmin=c(0.7,0.9,0.7,1.7,1.9,2.7,2.9,2.7,2.9,3.7,3.9,4.7,4.9,4.7,4.9), xmax=c(1.1,1.1,1.3,2.1,2.1,3.1,3.1,3.3,3.3,4.1,4.1,5.1,5.1,5.3,5.3)) +
ggtitle("mRNA (13 samples)") +
labs(x = "",y="Relative abundance") +
theme_bw() +
#scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=label))+
geom_signif(annotations = c(formatC("***", digits=0),formatC("**", digits=0)),
#formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0),formatC("**", digits=0)),
y_position = c(34, 58), xmin=c(1.8,3.8), xmax=c(2.2,4.2)) +
ggtitle("mRNA (13 samples)") +
labs(x = "",y="Relative abundance") +
theme_bw() +
#scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
p<-ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=label))+
geom_signif(annotations = c(formatC("***", digits=0),formatC("**", digits=0)),
#formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0),formatC("**", digits=0)),
y_position = c(34, 50), xmin=c(1.8,3.8), xmax=c(2.2,4.2)) +
ggtitle("mRNA (13 samples)") +
labs(x = "",y="Relative abundance") +
theme_bw() +
#scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
gg.gap(plot=p,
segments=c(1,2),
tick_width = c(0.2,4),
ylim=c(0,66))
library(dada2)
seqtab.nochimR1=readRDS("/Volumes/DATA/metaSacchetti/Dicembre_2019/Irun/16Smeta/seqtab.nochimR1")
seqtab.nochimR1_split1=seqtab.nochimR1[,1:1000]
#assign taxonomy
taxa1 <- assignTaxonomy(seqtab.nochimR1_split1, "/Users/ilariagranata/Downloads/silva_nr_v128_train_set.fa.gz", multithread=TRUE)
View(taxa1)
taxa1$Kingdom
taxa1[,2]
taxa1[,1]
taxa1_proc<-subset.matrix(taxa1,taxa1[,1]=="Bacteria")
saveRDS(taxa1_proc,"/Volumes/DATA/metaSacchetti/16S/dada_gennaio2020/join/taxa1_proc")
seqtab.nochimR1_split2=seqtab.nochimR1[,1001:2000]
#assign taxonomy
taxa2 <- assignTaxonomy(seqtab.nochimR1_split2, "/Users/ilariagranata/Downloads/silva_nr_v128_train_set.fa.gz", multithread=TRUE)
taxa2_proc<-subset.matrix(taxa2,taxa2[,1]=="Bacteria")
saveRDS(taxa2_proc,"/Volumes/DATA/metaSacchetti/16S/dada_gennaio2020/join/taxa2_proc")
seqtab.nochimR1_split3=seqtab.nochimR1[,2001:2748]
#assign taxonomy
taxa3 <- assignTaxonomy(seqtab.nochimR1_split3, "/Users/ilariagranata/Downloads/silva_nr_v128_train_set.fa.gz", multithread=TRUE)
taxa3_proc<-subset.matrix(taxa3,taxa3[,1]=="Bacteria")
dim(rbind(taxa1,taxa2,taxa3))
taxa=rbind(taxa1,taxa2,taxa3)
unname(head(taxa))
saveRDS(taxa,"/Volumes/DATA/metaSacchetti/16S/dada_gennaio2020/join/taxa")
names(seqtab.nochimR1)
View(taxa)
seq=rownames(taxa)
seqtab=as.data.frame(seqtab.nochimR1)
seqtab2=seqtab[,seq %in% colnames(seqtab)[grepl(str,colnames(seqtab))]]
seqtab2=seqtab[,seq %in% colnames(seqtab)]
#Construct phylogenetic tree
#if (!requireNamespace("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("phangorn")
library(DECIPHER)
seqs <- getSequences(seqtab.nochimR1)
names(seqs) <- seqs # This propagates to the tip labels of the tree
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA,verbose=FALSE)
library(phangorn)
phangAlign <- phyDat(as(alignment, "matrix"), type="DNA")
dm <- dist.ml(phangAlign)
treeNJ <- NJ(dm) # Note, tip order != sequence order
fit = pml(treeNJ, data=phangAlign)
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
rearrangement = "stochastic", control = pml.control(trace = 0))
saveRDS(taxa,"/Volumes/DATA/metaSacchetti/Dicembre_2019/Irun/16Smeta/taxa")
saveRDS(fitGTR,"/Volumes/DATA/metaSacchetti/Dicembre_2019/Irun/16Smeta//fitGT")
#create phyloseq object
library(phyloseq)
samdf <- read.table("/Volumes/DATA/metaSacchetti/16S/dada_gennaio2020/concatenate/three_classes/samdf_3classes.txt", header=TRUE, sep="\t")
View(samdf)
View(samdf)
samdf=data.frame(SampleID=rownames(seqtab))
View(samdf)
samdf$condition=c("CO","CO","CO","CO","CO","CO","CO","CO","CO","CO","CO","OB","OB","OB","OB","OB","OB","OB","OB","OB","OB","OB","OB")
#create phyloseq object
library(phyloseq)
#samdf$type <- c("0-B","0-B","0-B","0-B","0-B","0-BV","0-BV","0-BV","0-BV","0-BV","0-CN","0-CN","0-CN","0-CN","0-CN","0-V","0-V","0-V","0-V","0-V","1-B","1-B","1-B","1-B","1-B","1-BV","1-BV","1-BV","1-BV","1-BV","1-CN","1-CN","1-CN","1-CN","1-CN","1-V","1-V","1-V","1-V","1-V","18-B","18-B","18-B","18-B","18-B","18-BV","18-BV","18-BV","18-BV","18-BV","18-CN","18-CN","18-CN","18-CN","18-CN","18-V","18-V","18-V","18-V","18-V","20-B","20-B","20-B","20-B","20-B","20-BV","20-BV","20-BV","20-BV","20-BV","20-CN","20-CN","20-CN","20-CN","20-CN","20-V","20-V","20-V","20-V","20-V","24-B","24-B","24-B","24-B","24-BV","24-BV","24-BV","24-BV","24-V","24-V","24-V","24-V","24-V")
ps <- phyloseq(otu_table(seqtab.nochimR1, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa),phy_tree(fitGTR$tree))
sample_data(samdf)
View(samdf)
rownames(samdf)=samdf$SampleID
#samdf$type <- c("0-B","0-B","0-B","0-B","0-B","0-BV","0-BV","0-BV","0-BV","0-BV","0-CN","0-CN","0-CN","0-CN","0-CN","0-V","0-V","0-V","0-V","0-V","1-B","1-B","1-B","1-B","1-B","1-BV","1-BV","1-BV","1-BV","1-BV","1-CN","1-CN","1-CN","1-CN","1-CN","1-V","1-V","1-V","1-V","1-V","18-B","18-B","18-B","18-B","18-B","18-BV","18-BV","18-BV","18-BV","18-BV","18-CN","18-CN","18-CN","18-CN","18-CN","18-V","18-V","18-V","18-V","18-V","20-B","20-B","20-B","20-B","20-B","20-BV","20-BV","20-BV","20-BV","20-BV","20-CN","20-CN","20-CN","20-CN","20-CN","20-V","20-V","20-V","20-V","20-V","24-B","24-B","24-B","24-B","24-BV","24-BV","24-BV","24-BV","24-V","24-V","24-V","24-V","24-V")
ps <- phyloseq(otu_table(seqtab.nochimR1, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa),phy_tree(fitGTR$tree))
ps
rank_names(ps)
#root the tree for analyses as Unifrac
phy_tree(ps) <- root(phy_tree(ps), sample(taxa_names(ps), 1), resolve.root = TRUE)
is.rooted(phy_tree(ps))
#remove uncharacterized
ps <- subset_taxa(ps, !is.na(Phylum) & !Phylum %in% c("", "uncharacterized"))
plot_richness(ps, x="severity", measures=c("Chao1","Shannon","Simpson"), color="Condition")+ geom_boxplot()
library(gplots)
library(ggplot2)
plot_richness(ps.rarefied, x="Condition", color="Condition",measures=c("Observed", "Shannon","Simpson")) + geom_boxplot()
plot_richness(ps, x="Condition", color="Condition",measures=c("Observed", "Shannon","Simpson")) + geom_boxplot()
View(samdf)
plot_richness(ps, x="condition", color="condition",measures=c("Observed", "Shannon","Simpson")) + geom_boxplot()
phylum=table(tax_table(ps)[, "Phylum"], exclude = NA)
ps.perc <- transform_sample_counts(ps, function(OTU) OTU*100/sum(OTU))
library("phyloseq")
library("ggplot2")
library("vegan")
library("DESeq2")
#Kruskal Wallis and Dunn test
# generate a vector containing the full taxonomy path for all OTUs
ps.perc <- transform_sample_counts(ps, function(OTU) OTU*100/sum(OTU))
wholetax <- do.call(paste, c(as.data.frame(tax_table(ps.perc))
[c("Phylum")],
sep = "_"))  # to distinguish from "_" within tax ranks
# turn the otu_table into a data.frame
otu_export <- as.data.frame(otu_table(t(ps.perc)))
tmp <- names(otu_export)
# paste wholetax and OTU_ids together
for(i in 1:length(tmp)){
names(tmp)[i] = paste(wholetax[i], tmp[i], sep = "__")
}
# overwrite old names
names(otu_export) <- names(tmp)
t_otuexport=t(otu_export)
list.filenames=rownames(t_otuexport)
list_names = ""
for (name in list.filenames) {
list_names <- c(list_names, unlist(strsplit(name, split='__', fixed=TRUE))[1])}
list_names <- list_names[-1]
t_otuexport=as.data.frame(t_otuexport)
t_otuexport$Phylum=list_names
require(dplyr)
t_otuexport_sum=t_otuexport %>%
group_by(Phylum) %>%
summarise_all(funs(sum))
names=t_otuexport_sum$Phylum
t_otuexport_sum=t_otuexport_sum[,-1]
colnames(t_otuexport_sum)=samdf$SampleID
View(samdf)
rownames(t_otuexport_sum)=names
asv_Phylum_kruskal=t(t_otuexport_sum)
#colnames(asv_Class_kruskal)[6]="Deinococcus_Thermus"
write.table(asv_Phylum_kruskal, file="/Volumes/DATA/metaSacchetti/Dicembre_2019/Irun/16Smeta//asv_Phylum_kruskal_fw_ObvsCO.txt", sep="\t")
#kruskal + dunn
x= as.data.frame(asv_Phylum_kruskal)
g= samdf
View(x)
View(asv_Phylum_kruskal)
View(otu_export)
View(ps.perc)
# turn the otu_table into a data.frame
otu_export <- as.data.frame(otu_table(ps.perc))
View(otu_export)
tmp <- names(otu_export)
# paste wholetax and OTU_ids together
for(i in 1:length(tmp)){
names(tmp)[i] = paste(wholetax[i], tmp[i], sep = "__")
}
# overwrite old names
names(otu_export) <- names(tmp)
t_otuexport=t(otu_export)
list.filenames=rownames(t_otuexport)
list_names = ""
for (name in list.filenames) {
list_names <- c(list_names, unlist(strsplit(name, split='__', fixed=TRUE))[1])}
list_names <- list_names[-1]
t_otuexport=as.data.frame(t_otuexport)
t_otuexport$Phylum=list_names
View(t_otuexport)
require(dplyr)
t_otuexport_sum=t_otuexport %>%
group_by(Phylum) %>%
summarise_all(funs(sum))
names=t_otuexport_sum$Phylum
t_otuexport_sum=t_otuexport_sum[,-1]
colnames(t_otuexport_sum)=samdf$SampleID
rownames(t_otuexport_sum)=names
asv_Phylum_kruskal=t(t_otuexport_sum)
View(asv_Phylum_kruskal)
#colnames(asv_Class_kruskal)[6]="Deinococcus_Thermus"
write.table(asv_Phylum_kruskal, file="/Volumes/DATA/metaSacchetti/Dicembre_2019/Irun/16Smeta//asv_Phylum_kruskal_fw_ObvsCO.txt", sep="\t")
#kruskal + dunn
x= as.data.frame(asv_Phylum_kruskal)
g= samdf
x[,24] = matrix(0,nrow=nrow(x),ncol=1)
View(x)
x[,15] = matrix(0,nrow=nrow(x),ncol=1)
colnames(x)[15] = "condition"
x$condition = g$Condition
library(dplyr)
library(tidyr)
library(broom)
library(FSA)
df2 <- x %>% gather(key, value, -condition) %>%
group_by(key) %>%
do(tidy(kruskal.test(x= .$value, g = .$condition)))
df2
View(x)
x[,15] = matrix(0,nrow=nrow(x),ncol=1)
colnames(x)[15] = "condition"
View(x)
View(g)
x$condition = g$condition
df2 <- x %>% gather(key, value, -condition) %>%
group_by(key) %>%
do(tidy(kruskal.test(x= .$value, g = .$condition)))
df2
pvalue=df2$p.value
padj=p.adjust(pvalue,method="fdr")
df2$padj=padj
write.table(df2, "/Volumes/DATA/metaSacchetti/Dicembre_2019/Irun/16Smeta//kruskal_Phylum_OBCO.txt", sep="\t")
asv_Genus=read.table("/Volumes/DATA/metaSacchetti/Dicembre_2019/Irun/16Smeta/asv_Phylum_kruskal_fw_ObvsCO.txt", sep="\t", row.names=1, header=TRUE)
View(asv_Genus)
seqtab=readRDS("/Volumes/DATA/metaSacchetti/Dicembre_2019/Irun/16Smeta/seqtab.nochimR1")
setab=as.data.frame(seqtab)
samdf=data.frame(SampleID=rownames(setab))
View(samdf)
samdf$condition=c("CO","CO","CO","CO","CO","CO","CO","CO","CO","CO","CO","OB","OB","OB","OB","OB","OB","OB","OB","OB","OB","OB","OB")
rownames(samdf)=samdf$SampleID
#kruskal + dunn
x= as.data.frame(asv_Genus)
g= samdf
x[,24] = matrix(0,nrow=nrow(x),ncol=1)
colnames(x)[24] = "condition"
x[,15] = matrix(0,nrow=nrow(x),ncol=1)
colnames(x)[15] = "condition"
x$condition = g$condition
library(dplyr)
library(tidyr)
library(broom)
library(FSA)
df2 <- x %>% gather(key, value, -condition) %>%
group_by(key) %>%
do(tidy(kruskal.test(x= .$value, g = .$condition)))
View(df2)
View(x)
View(x)
View(setab)
taxa=readRDS("/Volumes/DATA/metaSacchetti/Dicembre_2019/Irun/16Smeta/taxa")
write.table(taxa,"/Volumes/DATA/metaSacchetti/Dicembre_2019/Irun/16Smeta/taxa.txt",sep="\t")
x=x[,1-4-7-9-12]
View(x)
class(x)
xsub=x[,c("Actinobacteria","Bacteroidetes","Firmicutes","Fusobacteria","Proteobacteria")]
View(xsub)
df.m <- melt(xsub, id.var = "condition")
require(reshape2)
df.m <- melt(xsub, id.var = "condition")
xsub=x[,c("Actinobacteria","Bacteroidetes","Firmicutes","Fusobacteria","Proteobacteria","condition")]
df.m <- melt(xsub, id.var = "condition")
View(df.m)
pv <- df.m %>% group_by(variable) %>%
summarize(p.value = kruskal.test(value ~ condtion)$p.value)
pv <- df.m %>% group_by(variable) %>%
summarize(p.value = kruskal.test(value ~ condition)$p.value)
pv
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=label))+
#geom_signif(annotations = c(formatC("***", digits=0),formatC("**", digits=0)),
#formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0),formatC("**", digits=0)),
# y_position = c(34, 50), xmin=c(1.8,3.8), xmax=c(2.2,4.2)) +
ggtitle("16S RNA") +
labs(x = "",y="Relative abundance") +
theme_bw() +
#scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
require(ggplot2)
require(ggsignif)
require(dplyr)
require(gg.gap)
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=label))+
#geom_signif(annotations = c(formatC("***", digits=0),formatC("**", digits=0)),
#formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0),formatC("**", digits=0)),
# y_position = c(34, 50), xmin=c(1.8,3.8), xmax=c(2.2,4.2)) +
ggtitle("16S RNA") +
labs(x = "",y="Relative abundance") +
theme_bw() +
#scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=condition))+
#geom_signif(annotations = c(formatC("***", digits=0),formatC("**", digits=0)),
#formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0),formatC("**", digits=0)),
# y_position = c(34, 50), xmin=c(1.8,3.8), xmax=c(2.2,4.2)) +
ggtitle("16S RNA") +
labs(x = "",y="Relative abundance") +
theme_bw() +
#scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
View(df.m)
View(df.m)
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=condition))+
geom_signif(annotations = c(formatC("*", digits=0)),
#formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0),formatC("**", digits=0)),
y_position = c(75), xmin=c(2.8), xmax=c(3.2)) +
ggtitle("16S RNA") +
labs(x = "",y="Relative abundance") +
theme_bw() +
#scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
p<-ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=condition))+
geom_signif(annotations = c(formatC("*", digits=0)),
#formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0),formatC("**", digits=0)),
y_position = c(75), xmin=c(2.8), xmax=c(3.2)) +
ggtitle("16S RNA") +
labs(x = "",y="Relative abundance") +
theme_bw() +
#scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
gg.gap(plot=p,
segments=c(1,2.5),
tick_width = c(0.2,15),
ylim=c(0,85))
gg.gap(plot=p,
segments=c(0.8,2.5),
tick_width = c(0.05,15),
ylim=c(0,85))
View(df.m)
gg.gap(plot=p,
segments=c(0.8,2.5),
tick_width = c(0.01,15),
ylim=c(0,90))
gg.gap(plot=p,
segments=c(0.1,1,5),
tick_width = c(0.01,0.5,15),
ylim=c(0,90))
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=condition))+
geom_signif(annotations = c(formatC("*", digits=0)),
#formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("*", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("***", digits=0),formatC("*", digits=0),formatC("**", digits=0),formatC("***", digits=0),formatC("**", digits=0),formatC("**", digits=0)),
y_position = c(75), xmin=c(2.8), xmax=c(3.2)) +
ggtitle("16S RNA") +
labs(x = "",y="Relative abundance") +
theme_bw() +
#scale_fill_manual(values=c("#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#00BFC4","#F8766D","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4","#7CAE00","#C77CFF","#F8766D","#00BFC4"))+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
library(MetabolitesGraphs)
stoich_mat <- load_mod(system.file("extdata", "kidney.xml", package = "MetabolitesGraphs"))
edges_list <- edges_list(stoich_mat)
data(rxn_gene)
edges_list_w_enzymes <- add_enzymes(edges_list, rxn_gene)
data(recurring_mets)
edges_list_no_rec_mets <- remove_mets(edges_list_w_enzymes, curr_met)
expr_dir <- system.file("extdata/expression/", package = "MetabolitesGraphs"))
expr_dir <- system.file("extdata/expression/", package = "MetabolitesGraphs")
output_dir <- "./"
output_dir <- "/Volumes/DATA/"
integrate_expression(edges_list_no_rec_mets,expr_dir, "txt", "edges-", output_dir)
input_dir <- system.file("extdata/edges_list/", package = "MetabolitesGraphs"))
input_dir <- system.file("extdata/edges_list/", package = "MetabolitesGraphs")
output_dir <- "/Volumes/DATA/"
getMetGraph(input_dir,output_dir)
getwd()
setwd("/Volumes/DATA/scripts/packages/MetabolitesGraphs-master")
usethis::use_vignette()
usethis::use_vignette("MetabolitesGraphs.Rmd")
usethis::use_vignette("MetabolitesGraphs")
devtoll
devtools::document()
devtools::load_all()
devtools::install()
